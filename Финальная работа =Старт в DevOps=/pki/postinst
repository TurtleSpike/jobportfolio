#!/bin/bash

########### Установка пакетов

gitstatus=`dpkg --get-selections | grep -w "git" | head -1 | awk '{print $2}'`
nodestatus=`dpkg --get-selections | grep -w "prometheus-node-exporter" | head -1 | awk '{print $2}'`
apachestatus=`dpkg --get-selections | grep -w "apache2-utils" | head -1 | awk '{print $2}'`
sudo apt-get update

if [ $gitstatus == "install" ]
then
	echo -e '\033[37m = = = = Git is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install git -y
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Git has been installed successfully = = = = \033[m'
	fi
fi

if [ $nodestatus == "install" ]
then
	echo -e '\033[37m = = = = Node Exporter is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install prometheus-node-exporter -y
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Node Exporter has been installed successfully = = = = \033[m'
	fi
fi

if [ $nodestatus == "install" ]
then
	echo -e '\033[37m = = = = "apache2-utils" package is already installed. Skipping... = = = = \033[m'
else
	sudo apt install apache2-utils -y
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = "apache2-utils" package has been installed successfully = = = = \033[m'
	fi
fi

########### Юниты и файлы

sudo chmod +x /tmp/auto-backup.sh
sudo chmod +x /tmp/pki-setup-scripts/*.sh

sudo mv /tmp/auto-backup.service /etc/systemd/system
sudo mv /tmp/auto-backup.timer /etc/systemd/system
sudo mv /tmp/auto-backup.sh /usr/local/bin
sudo mv /tmp/pki-setup-scripts /home/$USER

echo -e '\033[92m = = = = All files have been placed into their directories = = = = \033[m'

sudo systemctl daemon-reload
sudo systemctl enable auto-backup.service
sudo systemctl enable auto-backup.timer
sudo systemctl start auto-backup.timer

echo -e '\033[92m = = = = New systemd-units have been enabled and started = = = = \033[m'

########### Создание SSH ключей

ssh-keygen -t ed25519 -C "pki-server" -f /home/$USER/.ssh/pki-server

echo -e '\033[92m = = = = "pki-server" SSH keys for GitHub/GitLab backup repository have been generated on path \033[4;92m/home/'$USER'/.ssh\033[m\033[92m = = = = \033[m'
echo -e '\033[37m = = = = Use this public key to sync with your backup remote repository: = = = = \033[m'
cat /home/$USER/.ssh/pki-server.pub

while true
do
	read -p "Press [y] when you are ready: " choice
	if [ $choice == "y" || $choice == "Y" ]
	then
		break
	else
	fi
done

########### Создание бэкапирования

sudo mkdir /backup
sudo chown $USER:$USER /backup

echo -e "\033[92m = = = = Backup directory has been created. It's path is \033[4;92m/backup\033[m\033[92m = = = = \033[m"

cd /backup
git init

echo -e '\033[92m = = = = Git directory has been successfully initialised on path \033[4;92m/backup\033[m\033[92m = = = = \033[m'

while true
do
	function starterrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			git config --global user.name "$gitname"
			git config --global user.email "$gitemail"
			echo -e '\033[92m = = = = Git name and email have been set = = = = \033[m'
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your choice: \033[m' confirm
			starterrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Enter your name to be set in Git config: \033[m' gitname
	read -p $'\033[37m = = = = Enter your email to be set in Git config: \033[m' gitemail
	read -p $'\033[1;33m = = = = Confirm your choice [y/n]: \033[m' confirm
	starterrorconfirm
done

while true
do
	function giterrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			eval `ssh-agent -s`
			ssh-add
			ssh-add ~/.ssh/pki-server
			echo -e '\033[92m = = = = Private key "pki-server" has been successfully added to the SSH Agent = = = = \033[m'
			git add .
			git commit -m 'Initial commit'
			git remote add origin $backupsshlink
			git push -u origin master
			echo -e '\033[92m = = = = Initial commit has been executed = = = = \033[m'
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
		then
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your input: \033[m' confirm
			giterrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Enter your backup repository SSH link: ' backupsshink
	read -p $'\033[1;33m = = = = Confirm your input [y/n]: \033[m' confirm
	giterrorconfirm
done

########### Настройка node-экспортера

sudo mkdir /etc/node-exporter
sudo chown $USER:$USER /etc/node-exporter
cd /etc/node-exporter

sudo openssl genrsa -out pki-node-exporter.key 2048

if [ $? -ne 0 ]
  then
    echo -e '\033[91m = = = = "pki-node-exporter" private key has NOT been generated = = = = \033[m'
  else
    echo -e '\033[91m = = = = 2048-bit RSA "pki-node-exporter" private key has been generated successfully on path \033[4;92m/etc/node-exporter\033[m\033[92m = = = = \033[m'
fi

while true
do
	echo -e '\033[37m ~ ~ ~ ~  Use your external IP address as a Common Name (CN) ~ ~ ~ ~ \033[37m'
	sudo openssl req -new -key pki-node-exporter.key -out pki-node-exporter.csr
	status=$&
	if [ $status -ne 0 ]
	  then
		echo -e '\033[91m = = = = "pki-node-exporter" certificate request has NOT been generated = = = = \033[m'
	  else
		echo -e '\033[91m = = = = "pki-node-exporter" certificate request has been generated successfully on path \033[4;92m/etc/node-exporter\033[m\033[92m = = = = \033[m'
		break
	fi
done

sudo openssl x509 -req -days 365 -in pki-node-exporter.csr -signkey pki-node-exporter.key -out pki-node-exporter.crt

if [ $? -ne 0 ]
  then
    echo -e '\033[91m = = = = "pki-node-exporter" certificate was NOT signed = = = = \033[m'
  else
    echo -e '\033[91m = = = = "pki-node-exporter" certificate was signed successfully = = = = \033[m'
fi

sudo chmod o+r+w pki-node-exporter.key

while true
do
	function pkierrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			nodeuser=$username
			echo $nodeuser > pki-username.txt
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
		then
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your input: \033[m' confirm
			pkierrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Enter your username: \033[m' username
	read -p $'\033[1;33m = = = = Confirm your input [y/n]: \033[m' confirm
	pkierrorconfirm
done

read -p $'\033[37m = = = = Now enter your desired password to secure your Node Exporter = = = = \033[m'

while true
do
	htpasswd -nBC 12 "" | tr -d ':\n' > pki-pass.txt
	status=$?
	if [ $status -ne 0 ]
	  then
		echo -e '\033[91m = = = = Key hash has NOT been generated. Please, try again! = = = = \033[m'
	  else
		echo -e '\033[91m = = = = Key hash has been generated successfully = = = = \033[m'
		break
	fi
done
pkipass=`cat pki-pass.txt`
rm pki-pass.txt

cat << EOF >> /etc/node-exporter/config.yml
tls_server_config:
  cert_file: pki-node-exporter.crt
  key_file: pki-node-exporter.key
basic_auth_users:
    USERNAMEPLACEHOLDER: PKIPASSPLACEHOLDER
EOF

sudo sed -i "s|USERNAMEPLACEHOLDER|$nodeuser|" /etc/node-exporter/config.yml
sudo sed -i "s|PKIPASSPLACEHOLDER|$pkipass|" /etc/node-exporter/config.yml
echo -e '\033[91m = = = = "config.yml" TLS config has been created successfully on path \033[4;92m/etc/node-exporter\033[m\033[92m = = = = \033[m'

sudo sed -i 's|ExecStart=/usr/bin/prometheus-node-exporter &ARGS|ExecStart=/usr/bin/prometheus-node-exporter --web.config.file="/etc/node-exporter/config.yml"|' /usr/lib/systemd/system/prometheus-node-exporter.service
echo -e '\033[91m = = = = "prometheus-node-exporter" service has been adjusted successfully = = = = \033[m'

sudo systemctl daemon-reload
sudo systemctl restart prometheus-node-exporter
echo -e '\033[91m = = = = Systemd-unit changes have been applied successfully = = = = \033[m'

########### Создание трансфера

mkdir /home/$USER/transfer
cd /home/$USER/transfer
git init

while true
do
	function giterrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			git add .
			git commit -m 'Initial commit'
			git remote add origin $transfersshlink
			git push -u origin master
			echo -e '\033[92m = = = = Initial commit has been executed = = = = \033[m'
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
		then
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your input: \033[m' confirm
			giterrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Enter your backup repository SSH link: ' transfersshink
	read -p $'\033[1;33m = = = = Confirm your input [y/n]: \033[m' confirm
	giterrorconfirm
done

########### Передача данных на prom-сервер

cp /etc/node-exporter/pki-node-exporter.crt .
mv /etc/node-exporter/pki-username.txt .
sudo chown prometheus:prometheus pki-node-exporter.crt
curl -s ifconfig.me >> pki-ip.txt
lscpu | grep "^CPU(s):" | awk '{print $2}' > pki-cpu-amount.txt

sudo pull origin master
sudo push

echo -e '\033[92m = = = = All files to transfer have been sent to your remote transfer Git repository = = = = \033[m'

echo -e '\033[1;92m = = = = PKI package for OpenVPN setup has been installed successfully = = = = \033[m'
