#!/bin/bash

gitstatus=`dpkg --get-selections | grep -w "git" | head -1 | awk '{print $2}'`
promstatus=`dpkg --get-selections | grep -w "prometheus" | head -1 | awk '{print $2}'`
alertstatus=`dpkg --get-selections | grep -w "prometheus-alertmanager" | awk '{print $2}'`
nodestatus=`dpkg --get-selections | grep -w "prometheus-node-exporter" | head -1 | awk '{print $2}'`

sudo apt-get update

if [ $gitstatus == "install" ]
then
	echo -e '\033[37m = = = = Git is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install git
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Git has been installed successfully = = = = \033[m'
	else
		echo -e '\033[31m = = = = Git has NOT been installed successfully. Please, solve all issues and try again! = = = = \033[m'
	fi
fi

if [ $promstatus == "install" ]
then
	echo -e '\033[37m = = = = Prometheus is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install prometheus
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Prometheus has been installed successfully = = = = \033[m'
	else
		echo -e '\033[31m = = = = Prometheus has NOT been installed successfully. Please, solve all issues and try again! = = = = \033[m'
	fi
fi

if [ $alertstatus == "install" ]
then
	echo -e '\033[37m = = = = Alertmanager is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install prometheus-alertmanager
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Alertmanager has been installed successfully = = = = \033[m'
	else
		echo -e '\033[31m = = = = Alertmanager has NOT been installed successfully. Please, solve all issues and try again! = = = = \033[m'
	fi
fi

if [ $nodestatus == "install" ]
then
	echo -e '\033[37m = = = = Node Exporter is already installed. Skipping... = = = = \033[m'
else
	sudo apt-get install prometheus-node-exporter
	if [ $? -eq 0 ]
	then
		echo -e '\033[32m = = = = Node Exporter has been installed successfully = = = = \033[m'
	else
		echo -e '\033[31m = = = = Node Exporter has NOT been installed successfully. Please, solve all issues and try again! = = = = \033[m'
	fi
fi

cpuamount=`lscpu | grep "^CPU(s):" | awk '{print $2}'`

sed -i "s/CPUPLACEHOLDER/$cpuamount/" /tmp/ovpn.yml

sudo chmod +x /tmp/auto-backup.sh
sudo chmod +x /tmp/pki-setup-scripts/*.sh

sudo mv /tmp/ovpn.yml /etc/prometheus
sudo mv /tmp/auto-backup.service /etc/systemd/system
sudo mv /tmp/auto-backup.timer /etc/systemd/system
sudo mv /tmp/auto-backup.sh /usr/local/bin
sudo mv /tmp/pki-setup-scripts /home/$USER

echo -e '\033[92m = = = = All files have been placed into their directories = = = = \033[m'

sudo sed -i '/rule_files:/{
a\  - "ovpn.yml"
}' /etc/prometheus.yml

sudo systemctl restart prometheus

echo -e '\033[92m = = = = New Prometheus rules have been applied = = = = \033[m'

echo -e '\033[37m = = = = Follow this link to the bot in Telegram: \033[4;37mhttps://t.me/MiddlemanBot\033[m\033[37m = = = = \033[m'
while true
do
	read -p $'\033[37m = = = = Press Start button, recieve your token and enter it here: ' token
	read -p $'\033[1;33m = = = = Confirm your input [y/n]: ' confirm 
	function tokenerror {
		if [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		elif [ $confirm == "y" || $confirm == "Y" ]
			sed -i "s/TOKENPLACEHOLDER/$token/" /tmp/alertmanager-tg.yml
			break
		else
			read -p $'\033[37m = = = = Please, enter [y] or [n] to confirm your input: '
			tokenerror
		fi
	}
done

sudo chown $USER:$USER /etc/prometheus/alertmanager.yml
cat /tmp/alertmanager-tg.yml >> /etc/prometheus/alertmanager
sudo chown root:root /etc/prometheus/alertmanager.yml

echo -e '\033[92m = = = = Alertmanager configuration file has been edited successfully = = = = \033[m'

sudo systemctl daemon-reload
sudo systemctl enable auto-backup.service
sudo systemctl enable auto-backup.timer
sudo systemctl start auto-backup.timer

echo -e '\033[92m = = = = New systemd-units have been enabled and started = = = = \033[m'

sudo mkdir /backup
sudo chown $USER:$USER /backup

echo -e "\033[92m = = = = Backup directory has been created. It's path is \033[4;92m/backup\033[m\033[92m = = = = \033[m"

while true
do
  ssh-keygen -t ed25519 -C "vpn-backup" -f /home/$USER/.ssh/vpn-backup
  status=$?

  if [ $status -ne 0 ]
  then
    echo -e '\033[91m = = = = SSH keys have NOT been generated. Please, try again = = = = \033[m'
  else
    break
  fi
done

echo -e '\033[92m = = = = SSH keys for GitHub/GitLab backup repository have been generated on path \033[4;92m/home/'$USER'/.ssh\033[m\033[92m = = = = \033[m'
echo -e '\033[37m = = = = Use this public key to sync with your remote repository: = = = = \033[m'
cat /home/$USER/.ssh/vpn-backup.pub

while true
do
	read -p "Press [y] when you are ready: " choice
	if [ $choice == "y" || $choice == "Y" ]
	then
		break
	else
	fi
done

echo -e '\033[92m = = = = Private key "vpn-backup" has been successfully added to the SSH Agent = = = = \033[m'

cd /backup
git init

echo -e '\033[92m = = = = Git directory has been successfully initialised on path \033[4;92m/backup\033[m\033[92m = = = = \033[m'

while true
do
	function starterrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			git config --global user.name "$gitname"
			git config --global user.email "$gitemail"
			echo -e '\033[92m = = = = Git name and email have been set = = = = \033[m'
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your choice: \033[m' confirm
			starterrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Enter your name to be set in Git config: \033[m' gitname
	read -p $'\033[37m = = = = Enter your email to be set in Git config: \033[m' gitemail
	read -p $'\033[1;33m = = = = Confirm your choice [y/n]: \033[m' confirm
	starterrorconfirm
done

while true
do
	function giterrorchoice {
		if [ $gitchoice == "lab" ]
		then
			read -p $'\033[37m = = = = Enter your GitLab group project name: \033[m' groupname
			read -p $'\033[37m = = = = Enter your GitLab project name: \033[m' projectname
			sshlink="ssh://git@gitlab.com:$groupname/$projectname"
		elif [ $gitchoice == "hub" ]
		then
			read -p $'\033[37m = = = = Enter your GitHub username: \033[m' username
			read -p $'\033[37m = = = = Enter your Github repository name: \033[m' projectname
			sshlink="ssh://git@github.com:$username/$projectname"
		else
		then
			read -p $'\033[37m = = = = Please, enter [lab] or [hub] to sync your local repository with: \033[m' gitchoice
			giterrorconfirm
		fi
	}
	
	function giterrorconfirm {
		if [ $confirm == "y" || $confirm == "Y" ]
		then
			eval `ssh-agent -s`
			ssh-add ~/.ssh/vpn-backup
			echo -e '\033[92m = = = = Private key "vpn-backup" has been successfully added to the SSH Agent = = = = \033[m'
			git add .
			git commit -m 'Initial commit'
			git remote add origin $sshlink
			git push -u origin master
			echo -e '\033[92m = = = = Initial commit has been executed = = = = \033[m'
			break
		elif [ $confirm == "n" || $confirm == "N" ]
		then
			continue
		else
		then
			read -p $'\033[1;33m = = = = Please, enter [y] or [n] to confirm your input: \033[m' confirm
			giterrorconfirm
		fi
	}
	
	read -p $'\033[37m = = = = Choose your remote git repository service - GitLab or Github [lab/hub]: ' gitchoice
	giterrorchoice	
	
	read -p $'\033[1;33m = = = = Confirm your input [y/n]: \033[m' confirm
	giterrorconfirm
done

echo -e '\033[1;92m = = = = OpenVPN package has been installed successfully = = = = \033[m'
